# ██╗     ███████╗██████╗  ██████╗
# ██║     ██╔════╝██╔══██╗██╔════╝
# ██║     █████╗  ██████╔╝██║     
# ██║     ██╔══╝  ██╔══██╗██║     
# ███████╗██║     ██║  ██║╚██████╗
# ╚══════╝╚═╝     ╚═╝  ╚═╝ ╚═════╝

# user setting
set ratios 1:2:4
set cleaner ~/.config/lf/cleaner
set previewer ~/.config/lf/preview
set drawbox true
set icons true
set info "size"

# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
#cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
#map r push :rename<space>

# define a custom 'remove' command
cmd remove ${{
    set -f
    printf "$fx\n"
    printf "Confirm you want to remove the above file(s)? [y/n]: "
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# use '<remove>' key for either 'trash' or 'delete' command
map <remove> trash
# map <remove> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.tar) tar xvf $f;;
        *.zip) 7z x $f;;
        *.rar) 7z x $f;;
        *.7z) 7z x $f;;
        *) echo "Unsupported format" ;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd targz ${{
  set -f
  tar cvzf "$f.tar.gz" "$f"
}}

cmd zip ${{
  set -f
  7z a -tzip "$f.zip" "$f"
}}

cmd 7z ${{
  set -f
  7z a "$f.7z" "$f"
}}

# make directory
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

# make file
cmd touch ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd trash ${{
  trash-put "$f"
}}

cmd loop ${{
  mpv --loop=inf --fullscreen "$f"
}}

# trash command
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd trash ${{
  trash-restore
}}

cmd rsync ${{
  rsync -ah --info=progress2 $fx $(pwd)
}}

# remove some defaults
map m
map n
map "'"
map '"'
map d

# basic functionality
map p paste
map x cut
map y copy
map ctrl-r reload
map c clear
map <esc> unselect
map dd trash
map u trash
map DD remove
map t touch
map m mkdir

# archival functionality
map ax extract
map ag targz
map az zip
map aZ 7z

# movement
map ga cd ~/Archives
map gA cd ~/Auth
map gd cd ~/Documents
map gD cd ~/Downloads
map gp cd ~/Pictures
map gm cd ~/Mnt
map gM cd ~/Media
map gc cd ~/.config
map gC cd ~/Code
map gv cd ~/Videos
map gb cd ~/.local/bin
map gt cd ~/.local/share/Trash/files

# set media as ...
map W $set-wall "$f"
map L loop

# sync
map S :rsync; unselect
